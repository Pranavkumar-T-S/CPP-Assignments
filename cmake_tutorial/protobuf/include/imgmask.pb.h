// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imgmask.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_imgmask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_imgmask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_imgmask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_imgmask_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_imgmask_2eproto;
namespace imgmask {
class maskdetails;
struct maskdetailsDefaultTypeInternal;
extern maskdetailsDefaultTypeInternal _maskdetails_default_instance_;
}  // namespace imgmask
PROTOBUF_NAMESPACE_OPEN
template<> ::imgmask::maskdetails* Arena::CreateMaybeMessage<::imgmask::maskdetails>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace imgmask {

enum colorspace : int {
  BGR = 0,
  HSV = 1,
  colorspace_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  colorspace_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool colorspace_IsValid(int value);
constexpr colorspace colorspace_MIN = BGR;
constexpr colorspace colorspace_MAX = HSV;
constexpr int colorspace_ARRAYSIZE = colorspace_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* colorspace_descriptor();
template<typename T>
inline const std::string& colorspace_Name(T enum_t_value) {
  static_assert(::std::is_same<T, colorspace>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function colorspace_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    colorspace_descriptor(), enum_t_value);
}
inline bool colorspace_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, colorspace* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<colorspace>(
    colorspace_descriptor(), name, value);
}
// ===================================================================

class maskdetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:imgmask.maskdetails) */ {
 public:
  inline maskdetails() : maskdetails(nullptr) {}
  ~maskdetails() override;
  explicit PROTOBUF_CONSTEXPR maskdetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  maskdetails(const maskdetails& from);
  maskdetails(maskdetails&& from) noexcept
    : maskdetails() {
    *this = ::std::move(from);
  }

  inline maskdetails& operator=(const maskdetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline maskdetails& operator=(maskdetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const maskdetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const maskdetails* internal_default_instance() {
    return reinterpret_cast<const maskdetails*>(
               &_maskdetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(maskdetails& a, maskdetails& b) {
    a.Swap(&b);
  }
  inline void Swap(maskdetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(maskdetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  maskdetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<maskdetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const maskdetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const maskdetails& from) {
    maskdetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(maskdetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "imgmask.maskdetails";
  }
  protected:
  explicit maskdetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCstypeFieldNumber = 1,
    kXminFieldNumber = 2,
    kXmaxFieldNumber = 3,
    kYminFieldNumber = 4,
    kYmaxFieldNumber = 5,
    kZminFieldNumber = 6,
    kZmaxFieldNumber = 7,
  };
  // .imgmask.colorspace cstype = 1;
  void clear_cstype();
  ::imgmask::colorspace cstype() const;
  void set_cstype(::imgmask::colorspace value);
  private:
  ::imgmask::colorspace _internal_cstype() const;
  void _internal_set_cstype(::imgmask::colorspace value);
  public:

  // int32 xmin = 2;
  void clear_xmin();
  int32_t xmin() const;
  void set_xmin(int32_t value);
  private:
  int32_t _internal_xmin() const;
  void _internal_set_xmin(int32_t value);
  public:

  // int32 xmax = 3;
  void clear_xmax();
  int32_t xmax() const;
  void set_xmax(int32_t value);
  private:
  int32_t _internal_xmax() const;
  void _internal_set_xmax(int32_t value);
  public:

  // int32 ymin = 4;
  void clear_ymin();
  int32_t ymin() const;
  void set_ymin(int32_t value);
  private:
  int32_t _internal_ymin() const;
  void _internal_set_ymin(int32_t value);
  public:

  // int32 ymax = 5;
  void clear_ymax();
  int32_t ymax() const;
  void set_ymax(int32_t value);
  private:
  int32_t _internal_ymax() const;
  void _internal_set_ymax(int32_t value);
  public:

  // int32 zmin = 6;
  void clear_zmin();
  int32_t zmin() const;
  void set_zmin(int32_t value);
  private:
  int32_t _internal_zmin() const;
  void _internal_set_zmin(int32_t value);
  public:

  // int32 zmax = 7;
  void clear_zmax();
  int32_t zmax() const;
  void set_zmax(int32_t value);
  private:
  int32_t _internal_zmax() const;
  void _internal_set_zmax(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:imgmask.maskdetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int cstype_;
    int32_t xmin_;
    int32_t xmax_;
    int32_t ymin_;
    int32_t ymax_;
    int32_t zmin_;
    int32_t zmax_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_imgmask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// maskdetails

// .imgmask.colorspace cstype = 1;
inline void maskdetails::clear_cstype() {
  _impl_.cstype_ = 0;
}
inline ::imgmask::colorspace maskdetails::_internal_cstype() const {
  return static_cast< ::imgmask::colorspace >(_impl_.cstype_);
}
inline ::imgmask::colorspace maskdetails::cstype() const {
  // @@protoc_insertion_point(field_get:imgmask.maskdetails.cstype)
  return _internal_cstype();
}
inline void maskdetails::_internal_set_cstype(::imgmask::colorspace value) {
  
  _impl_.cstype_ = value;
}
inline void maskdetails::set_cstype(::imgmask::colorspace value) {
  _internal_set_cstype(value);
  // @@protoc_insertion_point(field_set:imgmask.maskdetails.cstype)
}

// int32 xmin = 2;
inline void maskdetails::clear_xmin() {
  _impl_.xmin_ = 0;
}
inline int32_t maskdetails::_internal_xmin() const {
  return _impl_.xmin_;
}
inline int32_t maskdetails::xmin() const {
  // @@protoc_insertion_point(field_get:imgmask.maskdetails.xmin)
  return _internal_xmin();
}
inline void maskdetails::_internal_set_xmin(int32_t value) {
  
  _impl_.xmin_ = value;
}
inline void maskdetails::set_xmin(int32_t value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:imgmask.maskdetails.xmin)
}

// int32 xmax = 3;
inline void maskdetails::clear_xmax() {
  _impl_.xmax_ = 0;
}
inline int32_t maskdetails::_internal_xmax() const {
  return _impl_.xmax_;
}
inline int32_t maskdetails::xmax() const {
  // @@protoc_insertion_point(field_get:imgmask.maskdetails.xmax)
  return _internal_xmax();
}
inline void maskdetails::_internal_set_xmax(int32_t value) {
  
  _impl_.xmax_ = value;
}
inline void maskdetails::set_xmax(int32_t value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:imgmask.maskdetails.xmax)
}

// int32 ymin = 4;
inline void maskdetails::clear_ymin() {
  _impl_.ymin_ = 0;
}
inline int32_t maskdetails::_internal_ymin() const {
  return _impl_.ymin_;
}
inline int32_t maskdetails::ymin() const {
  // @@protoc_insertion_point(field_get:imgmask.maskdetails.ymin)
  return _internal_ymin();
}
inline void maskdetails::_internal_set_ymin(int32_t value) {
  
  _impl_.ymin_ = value;
}
inline void maskdetails::set_ymin(int32_t value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:imgmask.maskdetails.ymin)
}

// int32 ymax = 5;
inline void maskdetails::clear_ymax() {
  _impl_.ymax_ = 0;
}
inline int32_t maskdetails::_internal_ymax() const {
  return _impl_.ymax_;
}
inline int32_t maskdetails::ymax() const {
  // @@protoc_insertion_point(field_get:imgmask.maskdetails.ymax)
  return _internal_ymax();
}
inline void maskdetails::_internal_set_ymax(int32_t value) {
  
  _impl_.ymax_ = value;
}
inline void maskdetails::set_ymax(int32_t value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:imgmask.maskdetails.ymax)
}

// int32 zmin = 6;
inline void maskdetails::clear_zmin() {
  _impl_.zmin_ = 0;
}
inline int32_t maskdetails::_internal_zmin() const {
  return _impl_.zmin_;
}
inline int32_t maskdetails::zmin() const {
  // @@protoc_insertion_point(field_get:imgmask.maskdetails.zmin)
  return _internal_zmin();
}
inline void maskdetails::_internal_set_zmin(int32_t value) {
  
  _impl_.zmin_ = value;
}
inline void maskdetails::set_zmin(int32_t value) {
  _internal_set_zmin(value);
  // @@protoc_insertion_point(field_set:imgmask.maskdetails.zmin)
}

// int32 zmax = 7;
inline void maskdetails::clear_zmax() {
  _impl_.zmax_ = 0;
}
inline int32_t maskdetails::_internal_zmax() const {
  return _impl_.zmax_;
}
inline int32_t maskdetails::zmax() const {
  // @@protoc_insertion_point(field_get:imgmask.maskdetails.zmax)
  return _internal_zmax();
}
inline void maskdetails::_internal_set_zmax(int32_t value) {
  
  _impl_.zmax_ = value;
}
inline void maskdetails::set_zmax(int32_t value) {
  _internal_set_zmax(value);
  // @@protoc_insertion_point(field_set:imgmask.maskdetails.zmax)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace imgmask

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::imgmask::colorspace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::imgmask::colorspace>() {
  return ::imgmask::colorspace_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_imgmask_2eproto
