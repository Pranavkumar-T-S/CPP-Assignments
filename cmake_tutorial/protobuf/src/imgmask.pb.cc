// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imgmask.proto

#include "imgmask.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace imgmask {
PROTOBUF_CONSTEXPR maskdetails::maskdetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cstype_)*/0
  , /*decltype(_impl_.xmin_)*/0
  , /*decltype(_impl_.xmax_)*/0
  , /*decltype(_impl_.ymin_)*/0
  , /*decltype(_impl_.ymax_)*/0
  , /*decltype(_impl_.zmin_)*/0
  , /*decltype(_impl_.zmax_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct maskdetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR maskdetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~maskdetailsDefaultTypeInternal() {}
  union {
    maskdetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 maskdetailsDefaultTypeInternal _maskdetails_default_instance_;
}  // namespace imgmask
static ::_pb::Metadata file_level_metadata_imgmask_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_imgmask_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_imgmask_2eproto = nullptr;

const uint32_t TableStruct_imgmask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::imgmask::maskdetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::imgmask::maskdetails, _impl_.cstype_),
  PROTOBUF_FIELD_OFFSET(::imgmask::maskdetails, _impl_.xmin_),
  PROTOBUF_FIELD_OFFSET(::imgmask::maskdetails, _impl_.xmax_),
  PROTOBUF_FIELD_OFFSET(::imgmask::maskdetails, _impl_.ymin_),
  PROTOBUF_FIELD_OFFSET(::imgmask::maskdetails, _impl_.ymax_),
  PROTOBUF_FIELD_OFFSET(::imgmask::maskdetails, _impl_.zmin_),
  PROTOBUF_FIELD_OFFSET(::imgmask::maskdetails, _impl_.zmax_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::imgmask::maskdetails)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::imgmask::_maskdetails_default_instance_._instance,
};

const char descriptor_table_protodef_imgmask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rimgmask.proto\022\007imgmask\"\206\001\n\013maskdetails"
  "\022#\n\006cstype\030\001 \001(\0162\023.imgmask.colorspace\022\014\n"
  "\004xmin\030\002 \001(\005\022\014\n\004xmax\030\003 \001(\005\022\014\n\004ymin\030\004 \001(\005\022"
  "\014\n\004ymax\030\005 \001(\005\022\014\n\004zmin\030\006 \001(\005\022\014\n\004zmax\030\007 \001("
  "\005*\036\n\ncolorspace\022\007\n\003BGR\020\000\022\007\n\003HSV\020\001b\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_imgmask_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_imgmask_2eproto = {
    false, false, 201, descriptor_table_protodef_imgmask_2eproto,
    "imgmask.proto",
    &descriptor_table_imgmask_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_imgmask_2eproto::offsets,
    file_level_metadata_imgmask_2eproto, file_level_enum_descriptors_imgmask_2eproto,
    file_level_service_descriptors_imgmask_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_imgmask_2eproto_getter() {
  return &descriptor_table_imgmask_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_imgmask_2eproto(&descriptor_table_imgmask_2eproto);
namespace imgmask {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* colorspace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_imgmask_2eproto);
  return file_level_enum_descriptors_imgmask_2eproto[0];
}
bool colorspace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class maskdetails::_Internal {
 public:
};

maskdetails::maskdetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:imgmask.maskdetails)
}
maskdetails::maskdetails(const maskdetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  maskdetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cstype_){}
    , decltype(_impl_.xmin_){}
    , decltype(_impl_.xmax_){}
    , decltype(_impl_.ymin_){}
    , decltype(_impl_.ymax_){}
    , decltype(_impl_.zmin_){}
    , decltype(_impl_.zmax_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cstype_, &from._impl_.cstype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.zmax_) -
    reinterpret_cast<char*>(&_impl_.cstype_)) + sizeof(_impl_.zmax_));
  // @@protoc_insertion_point(copy_constructor:imgmask.maskdetails)
}

inline void maskdetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cstype_){0}
    , decltype(_impl_.xmin_){0}
    , decltype(_impl_.xmax_){0}
    , decltype(_impl_.ymin_){0}
    , decltype(_impl_.ymax_){0}
    , decltype(_impl_.zmin_){0}
    , decltype(_impl_.zmax_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

maskdetails::~maskdetails() {
  // @@protoc_insertion_point(destructor:imgmask.maskdetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void maskdetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void maskdetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void maskdetails::Clear() {
// @@protoc_insertion_point(message_clear_start:imgmask.maskdetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cstype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.zmax_) -
      reinterpret_cast<char*>(&_impl_.cstype_)) + sizeof(_impl_.zmax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* maskdetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .imgmask.colorspace cstype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cstype(static_cast<::imgmask::colorspace>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 xmin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 xmax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ymin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ymin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ymax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ymax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 zmin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.zmin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 zmax = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.zmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* maskdetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:imgmask.maskdetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .imgmask.colorspace cstype = 1;
  if (this->_internal_cstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cstype(), target);
  }

  // int32 xmin = 2;
  if (this->_internal_xmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_xmin(), target);
  }

  // int32 xmax = 3;
  if (this->_internal_xmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_xmax(), target);
  }

  // int32 ymin = 4;
  if (this->_internal_ymin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ymin(), target);
  }

  // int32 ymax = 5;
  if (this->_internal_ymax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ymax(), target);
  }

  // int32 zmin = 6;
  if (this->_internal_zmin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_zmin(), target);
  }

  // int32 zmax = 7;
  if (this->_internal_zmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_zmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:imgmask.maskdetails)
  return target;
}

size_t maskdetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:imgmask.maskdetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .imgmask.colorspace cstype = 1;
  if (this->_internal_cstype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cstype());
  }

  // int32 xmin = 2;
  if (this->_internal_xmin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xmin());
  }

  // int32 xmax = 3;
  if (this->_internal_xmax() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xmax());
  }

  // int32 ymin = 4;
  if (this->_internal_ymin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ymin());
  }

  // int32 ymax = 5;
  if (this->_internal_ymax() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ymax());
  }

  // int32 zmin = 6;
  if (this->_internal_zmin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zmin());
  }

  // int32 zmax = 7;
  if (this->_internal_zmax() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zmax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData maskdetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    maskdetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*maskdetails::GetClassData() const { return &_class_data_; }


void maskdetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<maskdetails*>(&to_msg);
  auto& from = static_cast<const maskdetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:imgmask.maskdetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cstype() != 0) {
    _this->_internal_set_cstype(from._internal_cstype());
  }
  if (from._internal_xmin() != 0) {
    _this->_internal_set_xmin(from._internal_xmin());
  }
  if (from._internal_xmax() != 0) {
    _this->_internal_set_xmax(from._internal_xmax());
  }
  if (from._internal_ymin() != 0) {
    _this->_internal_set_ymin(from._internal_ymin());
  }
  if (from._internal_ymax() != 0) {
    _this->_internal_set_ymax(from._internal_ymax());
  }
  if (from._internal_zmin() != 0) {
    _this->_internal_set_zmin(from._internal_zmin());
  }
  if (from._internal_zmax() != 0) {
    _this->_internal_set_zmax(from._internal_zmax());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void maskdetails::CopyFrom(const maskdetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:imgmask.maskdetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool maskdetails::IsInitialized() const {
  return true;
}

void maskdetails::InternalSwap(maskdetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(maskdetails, _impl_.zmax_)
      + sizeof(maskdetails::_impl_.zmax_)
      - PROTOBUF_FIELD_OFFSET(maskdetails, _impl_.cstype_)>(
          reinterpret_cast<char*>(&_impl_.cstype_),
          reinterpret_cast<char*>(&other->_impl_.cstype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata maskdetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_imgmask_2eproto_getter, &descriptor_table_imgmask_2eproto_once,
      file_level_metadata_imgmask_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace imgmask
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::imgmask::maskdetails*
Arena::CreateMaybeMessage< ::imgmask::maskdetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::imgmask::maskdetails >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
