// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_project_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_project_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_project_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_project_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_project_2eproto;
namespace project {
class Change;
struct ChangeDefaultTypeInternal;
extern ChangeDefaultTypeInternal _Change_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class ProjectHeader;
struct ProjectHeaderDefaultTypeInternal;
extern ProjectHeaderDefaultTypeInternal _ProjectHeader_default_instance_;
class ProjectNames;
struct ProjectNamesDefaultTypeInternal;
extern ProjectNamesDefaultTypeInternal _ProjectNames_default_instance_;
}  // namespace project
PROTOBUF_NAMESPACE_OPEN
template<> ::project::Change* Arena::CreateMaybeMessage<::project::Change>(Arena*);
template<> ::project::Project* Arena::CreateMaybeMessage<::project::Project>(Arena*);
template<> ::project::ProjectHeader* Arena::CreateMaybeMessage<::project::ProjectHeader>(Arena*);
template<> ::project::ProjectNames* Arena::CreateMaybeMessage<::project::ProjectNames>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace project {

enum OperationType : int {
  ADD = 0,
  UPDATE = 1,
  DELETE = 2,
  OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OperationType_IsValid(int value);
constexpr OperationType OperationType_MIN = ADD;
constexpr OperationType OperationType_MAX = DELETE;
constexpr int OperationType_ARRAYSIZE = OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationType_descriptor();
template<typename T>
inline const std::string& OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperationType_descriptor(), enum_t_value);
}
inline bool OperationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperationType>(
    OperationType_descriptor(), name, value);
}
// ===================================================================

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:project.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit PROTOBUF_CONSTEXPR Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Project& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Project& from) {
    Project::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "project.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 4,
    kChangesFieldNumber = 7,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kCreatedDateFieldNumber = 11,
    kLastModifiedFieldNumber = 12,
    kVersionFieldNumber = 5,
    kOperationsCountFieldNumber = 6,
  };
  // repeated string text = 4;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // repeated .project.Change changes = 7;
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  ::project::Change* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::Change >*
      mutable_changes();
  private:
  const ::project::Change& _internal_changes(int index) const;
  ::project::Change* _internal_add_changes();
  public:
  const ::project::Change& changes(int index) const;
  ::project::Change* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::Change >&
      changes() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string author = 3;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // optional string createdDate = 11;
  bool has_createddate() const;
  private:
  bool _internal_has_createddate() const;
  public:
  void clear_createddate();
  const std::string& createddate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createddate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createddate();
  PROTOBUF_NODISCARD std::string* release_createddate();
  void set_allocated_createddate(std::string* createddate);
  private:
  const std::string& _internal_createddate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createddate(const std::string& value);
  std::string* _internal_mutable_createddate();
  public:

  // optional string lastModified = 12;
  bool has_lastmodified() const;
  private:
  bool _internal_has_lastmodified() const;
  public:
  void clear_lastmodified();
  const std::string& lastmodified() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastmodified(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastmodified();
  PROTOBUF_NODISCARD std::string* release_lastmodified();
  void set_allocated_lastmodified(std::string* lastmodified);
  private:
  const std::string& _internal_lastmodified() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastmodified(const std::string& value);
  std::string* _internal_mutable_lastmodified();
  public:

  // int32 version = 5;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // int32 operationsCount = 6;
  void clear_operationscount();
  int32_t operationscount() const;
  void set_operationscount(int32_t value);
  private:
  int32_t _internal_operationscount() const;
  void _internal_set_operationscount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:project.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::Change > changes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createddate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastmodified_;
    int32_t version_;
    int32_t operationscount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class Change final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:project.Change) */ {
 public:
  inline Change() : Change(nullptr) {}
  ~Change() override;
  explicit PROTOBUF_CONSTEXPR Change(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Change(const Change& from);
  Change(Change&& from) noexcept
    : Change() {
    *this = ::std::move(from);
  }

  inline Change& operator=(const Change& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change& operator=(Change&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Change& default_instance() {
    return *internal_default_instance();
  }
  static inline const Change* internal_default_instance() {
    return reinterpret_cast<const Change*>(
               &_Change_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Change& a, Change& b) {
    a.Swap(&b);
  }
  inline void Swap(Change* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Change* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Change* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Change>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Change& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Change& from) {
    Change::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "project.Change";
  }
  protected:
  explicit Change(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLine0FieldNumber = 3,
    kLine1FieldNumber = 4,
    kOpearationtypeFieldNumber = 1,
    kLinenumFieldNumber = 2,
  };
  // string line0 = 3;
  void clear_line0();
  const std::string& line0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line0();
  PROTOBUF_NODISCARD std::string* release_line0();
  void set_allocated_line0(std::string* line0);
  private:
  const std::string& _internal_line0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line0(const std::string& value);
  std::string* _internal_mutable_line0();
  public:

  // optional string line1 = 4;
  bool has_line1() const;
  private:
  bool _internal_has_line1() const;
  public:
  void clear_line1();
  const std::string& line1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line1();
  PROTOBUF_NODISCARD std::string* release_line1();
  void set_allocated_line1(std::string* line1);
  private:
  const std::string& _internal_line1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line1(const std::string& value);
  std::string* _internal_mutable_line1();
  public:

  // .project.OperationType opearationtype = 1;
  void clear_opearationtype();
  ::project::OperationType opearationtype() const;
  void set_opearationtype(::project::OperationType value);
  private:
  ::project::OperationType _internal_opearationtype() const;
  void _internal_set_opearationtype(::project::OperationType value);
  public:

  // int32 linenum = 2;
  void clear_linenum();
  int32_t linenum() const;
  void set_linenum(int32_t value);
  private:
  int32_t _internal_linenum() const;
  void _internal_set_linenum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:project.Change)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line0_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line1_;
    int opearationtype_;
    int32_t linenum_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class ProjectHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:project.ProjectHeader) */ {
 public:
  inline ProjectHeader() : ProjectHeader(nullptr) {}
  ~ProjectHeader() override;
  explicit PROTOBUF_CONSTEXPR ProjectHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectHeader(const ProjectHeader& from);
  ProjectHeader(ProjectHeader&& from) noexcept
    : ProjectHeader() {
    *this = ::std::move(from);
  }

  inline ProjectHeader& operator=(const ProjectHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectHeader& operator=(ProjectHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectHeader* internal_default_instance() {
    return reinterpret_cast<const ProjectHeader*>(
               &_ProjectHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProjectHeader& a, ProjectHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectHeader& from) {
    ProjectHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "project.ProjectHeader";
  }
  protected:
  explicit ProjectHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kCreationdateFieldNumber = 3,
    kAuthorFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Creationdate = 3;
  void clear_creationdate();
  const std::string& creationdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationdate();
  PROTOBUF_NODISCARD std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // string author = 4;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // @@protoc_insertion_point(class_scope:project.ProjectHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class ProjectNames final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:project.ProjectNames) */ {
 public:
  inline ProjectNames() : ProjectNames(nullptr) {}
  ~ProjectNames() override;
  explicit PROTOBUF_CONSTEXPR ProjectNames(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectNames(const ProjectNames& from);
  ProjectNames(ProjectNames&& from) noexcept
    : ProjectNames() {
    *this = ::std::move(from);
  }

  inline ProjectNames& operator=(const ProjectNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectNames& operator=(ProjectNames&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectNames& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectNames* internal_default_instance() {
    return reinterpret_cast<const ProjectNames*>(
               &_ProjectNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProjectNames& a, ProjectNames& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectNames* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectNames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectNames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectNames>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectNames& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectNames& from) {
    ProjectNames::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectNames* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "project.ProjectNames";
  }
  protected:
  explicit ProjectNames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectnamesFieldNumber = 1,
  };
  // repeated .project.ProjectHeader projectnames = 1;
  int projectnames_size() const;
  private:
  int _internal_projectnames_size() const;
  public:
  void clear_projectnames();
  ::project::ProjectHeader* mutable_projectnames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::ProjectHeader >*
      mutable_projectnames();
  private:
  const ::project::ProjectHeader& _internal_projectnames(int index) const;
  ::project::ProjectHeader* _internal_add_projectnames();
  public:
  const ::project::ProjectHeader& projectnames(int index) const;
  ::project::ProjectHeader* add_projectnames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::ProjectHeader >&
      projectnames() const;

  // @@protoc_insertion_point(class_scope:project.ProjectNames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::ProjectHeader > projectnames_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_project_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Project

// string id = 1;
inline void Project::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Project::id() const {
  // @@protoc_insertion_point(field_get:project.Project.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.Project.id)
}
inline std::string* Project::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:project.Project.id)
  return _s;
}
inline const std::string& Project::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Project::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_id() {
  // @@protoc_insertion_point(field_release:project.Project.id)
  return _impl_.id_.Release();
}
inline void Project::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.Project.id)
}

// string name = 2;
inline void Project::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:project.Project.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.Project.name)
}
inline std::string* Project::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:project.Project.name)
  return _s;
}
inline const std::string& Project::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Project::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_name() {
  // @@protoc_insertion_point(field_release:project.Project.name)
  return _impl_.name_.Release();
}
inline void Project::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.Project.name)
}

// optional string author = 3;
inline bool Project::_internal_has_author() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Project::has_author() const {
  return _internal_has_author();
}
inline void Project::clear_author() {
  _impl_.author_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Project::author() const {
  // @@protoc_insertion_point(field_get:project.Project.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_author(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.Project.author)
}
inline std::string* Project::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:project.Project.author)
  return _s;
}
inline const std::string& Project::_internal_author() const {
  return _impl_.author_.Get();
}
inline void Project::_internal_set_author(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_author() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_author() {
  // @@protoc_insertion_point(field_release:project.Project.author)
  if (!_internal_has_author()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.author_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.Project.author)
}

// repeated string text = 4;
inline int Project::_internal_text_size() const {
  return _impl_.text_.size();
}
inline int Project::text_size() const {
  return _internal_text_size();
}
inline void Project::clear_text() {
  _impl_.text_.Clear();
}
inline std::string* Project::add_text() {
  std::string* _s = _internal_add_text();
  // @@protoc_insertion_point(field_add_mutable:project.Project.text)
  return _s;
}
inline const std::string& Project::_internal_text(int index) const {
  return _impl_.text_.Get(index);
}
inline const std::string& Project::text(int index) const {
  // @@protoc_insertion_point(field_get:project.Project.text)
  return _internal_text(index);
}
inline std::string* Project::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:project.Project.text)
  return _impl_.text_.Mutable(index);
}
inline void Project::set_text(int index, const std::string& value) {
  _impl_.text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:project.Project.text)
}
inline void Project::set_text(int index, std::string&& value) {
  _impl_.text_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:project.Project.text)
}
inline void Project::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:project.Project.text)
}
inline void Project::set_text(int index, const char* value, size_t size) {
  _impl_.text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:project.Project.text)
}
inline std::string* Project::_internal_add_text() {
  return _impl_.text_.Add();
}
inline void Project::add_text(const std::string& value) {
  _impl_.text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:project.Project.text)
}
inline void Project::add_text(std::string&& value) {
  _impl_.text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:project.Project.text)
}
inline void Project::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:project.Project.text)
}
inline void Project::add_text(const char* value, size_t size) {
  _impl_.text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:project.Project.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Project::text() const {
  // @@protoc_insertion_point(field_list:project.Project.text)
  return _impl_.text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Project::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:project.Project.text)
  return &_impl_.text_;
}

// int32 version = 5;
inline void Project::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t Project::_internal_version() const {
  return _impl_.version_;
}
inline int32_t Project::version() const {
  // @@protoc_insertion_point(field_get:project.Project.version)
  return _internal_version();
}
inline void Project::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void Project::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:project.Project.version)
}

// int32 operationsCount = 6;
inline void Project::clear_operationscount() {
  _impl_.operationscount_ = 0;
}
inline int32_t Project::_internal_operationscount() const {
  return _impl_.operationscount_;
}
inline int32_t Project::operationscount() const {
  // @@protoc_insertion_point(field_get:project.Project.operationsCount)
  return _internal_operationscount();
}
inline void Project::_internal_set_operationscount(int32_t value) {
  
  _impl_.operationscount_ = value;
}
inline void Project::set_operationscount(int32_t value) {
  _internal_set_operationscount(value);
  // @@protoc_insertion_point(field_set:project.Project.operationsCount)
}

// repeated .project.Change changes = 7;
inline int Project::_internal_changes_size() const {
  return _impl_.changes_.size();
}
inline int Project::changes_size() const {
  return _internal_changes_size();
}
inline void Project::clear_changes() {
  _impl_.changes_.Clear();
}
inline ::project::Change* Project::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:project.Project.changes)
  return _impl_.changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::Change >*
Project::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:project.Project.changes)
  return &_impl_.changes_;
}
inline const ::project::Change& Project::_internal_changes(int index) const {
  return _impl_.changes_.Get(index);
}
inline const ::project::Change& Project::changes(int index) const {
  // @@protoc_insertion_point(field_get:project.Project.changes)
  return _internal_changes(index);
}
inline ::project::Change* Project::_internal_add_changes() {
  return _impl_.changes_.Add();
}
inline ::project::Change* Project::add_changes() {
  ::project::Change* _add = _internal_add_changes();
  // @@protoc_insertion_point(field_add:project.Project.changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::Change >&
Project::changes() const {
  // @@protoc_insertion_point(field_list:project.Project.changes)
  return _impl_.changes_;
}

// optional string createdDate = 11;
inline bool Project::_internal_has_createddate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Project::has_createddate() const {
  return _internal_has_createddate();
}
inline void Project::clear_createddate() {
  _impl_.createddate_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Project::createddate() const {
  // @@protoc_insertion_point(field_get:project.Project.createdDate)
  return _internal_createddate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_createddate(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.createddate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.Project.createdDate)
}
inline std::string* Project::mutable_createddate() {
  std::string* _s = _internal_mutable_createddate();
  // @@protoc_insertion_point(field_mutable:project.Project.createdDate)
  return _s;
}
inline const std::string& Project::_internal_createddate() const {
  return _impl_.createddate_.Get();
}
inline void Project::_internal_set_createddate(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.createddate_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_createddate() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.createddate_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_createddate() {
  // @@protoc_insertion_point(field_release:project.Project.createdDate)
  if (!_internal_has_createddate()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.createddate_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createddate_.IsDefault()) {
    _impl_.createddate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_createddate(std::string* createddate) {
  if (createddate != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.createddate_.SetAllocated(createddate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.createddate_.IsDefault()) {
    _impl_.createddate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.Project.createdDate)
}

// optional string lastModified = 12;
inline bool Project::_internal_has_lastmodified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Project::has_lastmodified() const {
  return _internal_has_lastmodified();
}
inline void Project::clear_lastmodified() {
  _impl_.lastmodified_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Project::lastmodified() const {
  // @@protoc_insertion_point(field_get:project.Project.lastModified)
  return _internal_lastmodified();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_lastmodified(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.lastmodified_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.Project.lastModified)
}
inline std::string* Project::mutable_lastmodified() {
  std::string* _s = _internal_mutable_lastmodified();
  // @@protoc_insertion_point(field_mutable:project.Project.lastModified)
  return _s;
}
inline const std::string& Project::_internal_lastmodified() const {
  return _impl_.lastmodified_.Get();
}
inline void Project::_internal_set_lastmodified(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lastmodified_.Set(value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_lastmodified() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.lastmodified_.Mutable(GetArenaForAllocation());
}
inline std::string* Project::release_lastmodified() {
  // @@protoc_insertion_point(field_release:project.Project.lastModified)
  if (!_internal_has_lastmodified()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.lastmodified_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lastmodified_.IsDefault()) {
    _impl_.lastmodified_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Project::set_allocated_lastmodified(std::string* lastmodified) {
  if (lastmodified != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.lastmodified_.SetAllocated(lastmodified, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lastmodified_.IsDefault()) {
    _impl_.lastmodified_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.Project.lastModified)
}

// -------------------------------------------------------------------

// Change

// .project.OperationType opearationtype = 1;
inline void Change::clear_opearationtype() {
  _impl_.opearationtype_ = 0;
}
inline ::project::OperationType Change::_internal_opearationtype() const {
  return static_cast< ::project::OperationType >(_impl_.opearationtype_);
}
inline ::project::OperationType Change::opearationtype() const {
  // @@protoc_insertion_point(field_get:project.Change.opearationtype)
  return _internal_opearationtype();
}
inline void Change::_internal_set_opearationtype(::project::OperationType value) {
  
  _impl_.opearationtype_ = value;
}
inline void Change::set_opearationtype(::project::OperationType value) {
  _internal_set_opearationtype(value);
  // @@protoc_insertion_point(field_set:project.Change.opearationtype)
}

// int32 linenum = 2;
inline void Change::clear_linenum() {
  _impl_.linenum_ = 0;
}
inline int32_t Change::_internal_linenum() const {
  return _impl_.linenum_;
}
inline int32_t Change::linenum() const {
  // @@protoc_insertion_point(field_get:project.Change.linenum)
  return _internal_linenum();
}
inline void Change::_internal_set_linenum(int32_t value) {
  
  _impl_.linenum_ = value;
}
inline void Change::set_linenum(int32_t value) {
  _internal_set_linenum(value);
  // @@protoc_insertion_point(field_set:project.Change.linenum)
}

// string line0 = 3;
inline void Change::clear_line0() {
  _impl_.line0_.ClearToEmpty();
}
inline const std::string& Change::line0() const {
  // @@protoc_insertion_point(field_get:project.Change.line0)
  return _internal_line0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Change::set_line0(ArgT0&& arg0, ArgT... args) {
 
 _impl_.line0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.Change.line0)
}
inline std::string* Change::mutable_line0() {
  std::string* _s = _internal_mutable_line0();
  // @@protoc_insertion_point(field_mutable:project.Change.line0)
  return _s;
}
inline const std::string& Change::_internal_line0() const {
  return _impl_.line0_.Get();
}
inline void Change::_internal_set_line0(const std::string& value) {
  
  _impl_.line0_.Set(value, GetArenaForAllocation());
}
inline std::string* Change::_internal_mutable_line0() {
  
  return _impl_.line0_.Mutable(GetArenaForAllocation());
}
inline std::string* Change::release_line0() {
  // @@protoc_insertion_point(field_release:project.Change.line0)
  return _impl_.line0_.Release();
}
inline void Change::set_allocated_line0(std::string* line0) {
  if (line0 != nullptr) {
    
  } else {
    
  }
  _impl_.line0_.SetAllocated(line0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.line0_.IsDefault()) {
    _impl_.line0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.Change.line0)
}

// optional string line1 = 4;
inline bool Change::_internal_has_line1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Change::has_line1() const {
  return _internal_has_line1();
}
inline void Change::clear_line1() {
  _impl_.line1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Change::line1() const {
  // @@protoc_insertion_point(field_get:project.Change.line1)
  return _internal_line1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Change::set_line1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.line1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.Change.line1)
}
inline std::string* Change::mutable_line1() {
  std::string* _s = _internal_mutable_line1();
  // @@protoc_insertion_point(field_mutable:project.Change.line1)
  return _s;
}
inline const std::string& Change::_internal_line1() const {
  return _impl_.line1_.Get();
}
inline void Change::_internal_set_line1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.line1_.Set(value, GetArenaForAllocation());
}
inline std::string* Change::_internal_mutable_line1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.line1_.Mutable(GetArenaForAllocation());
}
inline std::string* Change::release_line1() {
  // @@protoc_insertion_point(field_release:project.Change.line1)
  if (!_internal_has_line1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.line1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.line1_.IsDefault()) {
    _impl_.line1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Change::set_allocated_line1(std::string* line1) {
  if (line1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.line1_.SetAllocated(line1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.line1_.IsDefault()) {
    _impl_.line1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.Change.line1)
}

// -------------------------------------------------------------------

// ProjectHeader

// string id = 1;
inline void ProjectHeader::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ProjectHeader::id() const {
  // @@protoc_insertion_point(field_get:project.ProjectHeader.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectHeader::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.ProjectHeader.id)
}
inline std::string* ProjectHeader::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:project.ProjectHeader.id)
  return _s;
}
inline const std::string& ProjectHeader::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ProjectHeader::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectHeader::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectHeader::release_id() {
  // @@protoc_insertion_point(field_release:project.ProjectHeader.id)
  return _impl_.id_.Release();
}
inline void ProjectHeader::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.ProjectHeader.id)
}

// string name = 2;
inline void ProjectHeader::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ProjectHeader::name() const {
  // @@protoc_insertion_point(field_get:project.ProjectHeader.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectHeader::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.ProjectHeader.name)
}
inline std::string* ProjectHeader::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:project.ProjectHeader.name)
  return _s;
}
inline const std::string& ProjectHeader::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProjectHeader::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectHeader::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectHeader::release_name() {
  // @@protoc_insertion_point(field_release:project.ProjectHeader.name)
  return _impl_.name_.Release();
}
inline void ProjectHeader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.ProjectHeader.name)
}

// string Creationdate = 3;
inline void ProjectHeader::clear_creationdate() {
  _impl_.creationdate_.ClearToEmpty();
}
inline const std::string& ProjectHeader::creationdate() const {
  // @@protoc_insertion_point(field_get:project.ProjectHeader.Creationdate)
  return _internal_creationdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectHeader::set_creationdate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creationdate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.ProjectHeader.Creationdate)
}
inline std::string* ProjectHeader::mutable_creationdate() {
  std::string* _s = _internal_mutable_creationdate();
  // @@protoc_insertion_point(field_mutable:project.ProjectHeader.Creationdate)
  return _s;
}
inline const std::string& ProjectHeader::_internal_creationdate() const {
  return _impl_.creationdate_.Get();
}
inline void ProjectHeader::_internal_set_creationdate(const std::string& value) {
  
  _impl_.creationdate_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectHeader::_internal_mutable_creationdate() {
  
  return _impl_.creationdate_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectHeader::release_creationdate() {
  // @@protoc_insertion_point(field_release:project.ProjectHeader.Creationdate)
  return _impl_.creationdate_.Release();
}
inline void ProjectHeader::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    
  } else {
    
  }
  _impl_.creationdate_.SetAllocated(creationdate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creationdate_.IsDefault()) {
    _impl_.creationdate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.ProjectHeader.Creationdate)
}

// string author = 4;
inline void ProjectHeader::clear_author() {
  _impl_.author_.ClearToEmpty();
}
inline const std::string& ProjectHeader::author() const {
  // @@protoc_insertion_point(field_get:project.ProjectHeader.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectHeader::set_author(ArgT0&& arg0, ArgT... args) {
 
 _impl_.author_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:project.ProjectHeader.author)
}
inline std::string* ProjectHeader::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:project.ProjectHeader.author)
  return _s;
}
inline const std::string& ProjectHeader::_internal_author() const {
  return _impl_.author_.Get();
}
inline void ProjectHeader::_internal_set_author(const std::string& value) {
  
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectHeader::_internal_mutable_author() {
  
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectHeader::release_author() {
  // @@protoc_insertion_point(field_release:project.ProjectHeader.author)
  return _impl_.author_.Release();
}
inline void ProjectHeader::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:project.ProjectHeader.author)
}

// -------------------------------------------------------------------

// ProjectNames

// repeated .project.ProjectHeader projectnames = 1;
inline int ProjectNames::_internal_projectnames_size() const {
  return _impl_.projectnames_.size();
}
inline int ProjectNames::projectnames_size() const {
  return _internal_projectnames_size();
}
inline void ProjectNames::clear_projectnames() {
  _impl_.projectnames_.Clear();
}
inline ::project::ProjectHeader* ProjectNames::mutable_projectnames(int index) {
  // @@protoc_insertion_point(field_mutable:project.ProjectNames.projectnames)
  return _impl_.projectnames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::ProjectHeader >*
ProjectNames::mutable_projectnames() {
  // @@protoc_insertion_point(field_mutable_list:project.ProjectNames.projectnames)
  return &_impl_.projectnames_;
}
inline const ::project::ProjectHeader& ProjectNames::_internal_projectnames(int index) const {
  return _impl_.projectnames_.Get(index);
}
inline const ::project::ProjectHeader& ProjectNames::projectnames(int index) const {
  // @@protoc_insertion_point(field_get:project.ProjectNames.projectnames)
  return _internal_projectnames(index);
}
inline ::project::ProjectHeader* ProjectNames::_internal_add_projectnames() {
  return _impl_.projectnames_.Add();
}
inline ::project::ProjectHeader* ProjectNames::add_projectnames() {
  ::project::ProjectHeader* _add = _internal_add_projectnames();
  // @@protoc_insertion_point(field_add:project.ProjectNames.projectnames)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::project::ProjectHeader >&
ProjectNames::projectnames() const {
  // @@protoc_insertion_point(field_list:project.ProjectNames.projectnames)
  return _impl_.projectnames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace project

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::project::OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::project::OperationType>() {
  return ::project::OperationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_project_2eproto
